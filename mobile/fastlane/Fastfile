# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  desc "Push a new beta build to TestFlight"
  lane :beta do
    setup_ci if is_ci
    
    # Ensure certificates and provisioning profiles are up to date
    sync_code_signing(
      type: "appstore",
      readonly: true
    )
    
    # Increment build number
    increment_build_number(
      build_number: latest_testflight_build_number + 1,
    )
    
    # Build the app
    build_ios_app(
      workspace: "SportBeaconAI.xcworkspace",
      scheme: "SportBeaconAI",
      export_method: "app-store",
      export_options: {
        method: "app-store",
        provisioningProfiles: {
          "com.sportbeaconai.app" => "match AppStore com.sportbeaconai.app"
        }
      },
      clean: true,
      output_directory: "build",
      output_name: "SportBeaconAI.ipa"
    )
    
    # Upload to TestFlight
    upload_to_testflight(
      skip_waiting_for_build_processing: true,
      changelog: "Bug fixes and performance improvements"
    )
    
    # Notify team
    slack(
      message: "Successfully uploaded a new build to TestFlight",
      slack_url: ENV["SLACK_URL"],
      channel: "#ios-releases"
    )
  end

  desc "Build and test the app"
  lane :test do
    setup_ci if is_ci
    
    # Run tests
    run_tests(
      workspace: "SportBeaconAI.xcworkspace",
      scheme: "SportBeaconAI",
      device: "iPhone 15",
      clean: true
    )
    
    # Generate test report
    trainer(
      path: "build/reports",
      extension: "html"
    )
  end

  desc "Build app for development"
  lane :build do
    setup_ci if is_ci
    
    # Build the app
    build_ios_app(
      workspace: "SportBeaconAI.xcworkspace",
      scheme: "SportBeaconAI",
      export_method: "development",
      clean: true,
      output_directory: "build",
      output_name: "SportBeaconAI-dev.ipa"
    )
  end

  desc "Setup code signing"
  lane :setup_signing do
    setup_ci if is_ci
    
    # Sync certificates and provisioning profiles
    sync_code_signing(
      type: "appstore",
      readonly: true
    )
  end

  desc "Take screenshots for App Store"
  lane :screenshots do
    setup_ci if is_ci
    
    # Take screenshots
    capture_screenshots(
      workspace: "SportBeaconAI.xcworkspace",
      scheme: "SportBeaconAI",
      devices: ["iPhone 15 Pro Max", "iPhone 15", "iPhone SE (3rd generation)"],
      languages: ["en-US"],
      output_directory: "fastlane/screenshots",
      clear_previous_screenshots: true
    )
  end

  desc "Deploy to App Store"
  lane :release do
    setup_ci if is_ci
    
    # Ensure we're on main branch
    ensure_git_branch(branch: "main")
    
    # Ensure clean working directory
    ensure_git_status_clean
    
    # Setup code signing
    setup_signing
    
    # Increment version number
    increment_version_number(
      version_number: ENV["VERSION_NUMBER"]
    )
    
    # Build and upload
    build_ios_app(
      workspace: "SportBeaconAI.xcworkspace",
      scheme: "SportBeaconAI",
      export_method: "app-store",
      export_options: {
        method: "app-store",
        provisioningProfiles: {
          "com.sportbeaconai.app" => "match AppStore com.sportbeaconai.app"
        }
      },
      clean: true,
      output_directory: "build",
      output_name: "SportBeaconAI.ipa"
    )
    
    # Upload to App Store
    upload_to_app_store(
      skip_metadata: false,
      skip_screenshots: false,
      force: true
    )
    
    # Create git tag
    add_git_tag(
      tag: "v#{get_version_number}"
    )
    
    # Push changes
    push_git_tags
    
    # Notify team
    slack(
      message: "Successfully released SportBeaconAI v#{get_version_number} to App Store",
      slack_url: ENV["SLACK_URL"],
      channel: "#ios-releases"
    )
  end

  # Error handling
  error do |lane, exception, options|
    # Notify team of failure
    slack(
      message: " Fastlane lane '#{lane}' failed: #{exception.message}",
      slack_url: ENV["SLACK_URL"],
      channel: "#ios-releases"
    )
  end
end
