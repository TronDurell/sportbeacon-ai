version: '3.8'

services:
  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
    ports:
      - "80:80"
      - "443:443"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=https://api.sportbeacon.ai
      - REACT_APP_WS_URL=wss://ws.sportbeacon.ai
    depends_on:
      - backend
      - redis
    networks:
      - sportbeacon-network
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - FIREBASE_PRIVATE_KEY=${FIREBASE_PRIVATE_KEY}
      - FIREBASE_CLIENT_EMAIL=${FIREBASE_CLIENT_EMAIL}
      - WEB3_PROVIDER_URL=${WEB3_PROVIDER_URL}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
    depends_on:
      - redis
      - postgres
    networks:
      - sportbeacon-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=sportbeacon
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - sportbeacon-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - sportbeacon-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - sportbeacon-network
    restart: unless-stopped

  # AI Video Processing Service
  video-processor:
    build:
      context: ./backend
      dockerfile: Dockerfile.video
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - REDIS_URL=redis://redis:6379
    volumes:
      - video_storage:/app/videos
      - /tmp:/tmp
    depends_on:
      - redis
    networks:
      - sportbeacon-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'

  # WebSocket Service
  websocket:
    build:
      context: ./backend
      dockerfile: Dockerfile.websocket
    environment:
      - REDIS_URL=redis://redis:6379
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
    depends_on:
      - redis
    networks:
      - sportbeacon-network
    restart: unless-stopped

  # Background Job Processor
  job-processor:
    build:
      context: ./backend
      dockerfile: Dockerfile.jobs
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
    depends_on:
      - redis
      - postgres
    networks:
      - sportbeacon-network
    restart: unless-stopped

  # Plugin Manager Service
  plugin-manager:
    build:
      context: ./backend
      dockerfile: Dockerfile.plugins
    environment:
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - PLUGIN_STORAGE_PATH=/app/plugins
    volumes:
      - plugin_storage:/app/plugins
    networks:
      - sportbeacon-network
    restart: unless-stopped

  # Privacy & Compliance Service
  privacy-service:
    build:
      context: ./backend
      dockerfile: Dockerfile.privacy
    environment:
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      - postgres
    networks:
      - sportbeacon-network
    restart: unless-stopped

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - sportbeacon-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - sportbeacon-network
    restart: unless-stopped

  # Log Aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - sportbeacon-network
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - sportbeacon-network
    restart: unless-stopped

  filebeat:
    image: docker.elastic.co/beats/filebeat:8.8.0
    user: root
    volumes:
      - ./logs:/var/log/sportbeacon
      - ./monitoring/filebeat.yml:/usr/share/filebeat/filebeat.yml
    depends_on:
      - elasticsearch
    networks:
      - sportbeacon-network
    restart: unless-stopped

  # Backup Service
  backup-service:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=sportbeacon
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./scripts/backup.sh:/backup.sh
      - backup_storage:/backups
    command: ["/bin/sh", "-c", "while true; do /backup.sh; sleep 86400; done"]
    depends_on:
      - postgres
    networks:
      - sportbeacon-network
    restart: unless-stopped

  # Load Balancer
  haproxy:
    image: haproxy:2.6-alpine
    ports:
      - "8080:8080"
      - "8404:8404"
    volumes:
      - ./monitoring/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
    depends_on:
      - frontend
      - backend
    networks:
      - sportbeacon-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  video_storage:
    driver: local
  plugin_storage:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  backup_storage:
    driver: local

networks:
  sportbeacon-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 