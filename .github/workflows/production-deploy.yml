name: Production Deployment Pipeline

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      version:
        description: 'Version to deploy'
        required: false
        type: string

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: sportbeacon-ai

jobs:
  # Code Quality & Testing
  code-quality:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov

    - name: Run frontend type checking
      working-directory: ./frontend
      run: npm run type-check

    - name: Run frontend linting
      working-directory: ./frontend
      run: npm run lint

    - name: Run frontend tests
      working-directory: ./frontend
      run: npm run test:ci

    - name: Run backend tests
      working-directory: ./backend
      run: |
        pytest tests/ -v --cov=services --cov=api --cov-report=xml --cov-report=html
        pytest tests/test_comprehensive_suite.py -v

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

    - name: Run security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
      continue-on-error: true

  # Build & Package
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: code-quality
    timeout-minutes: 45
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Build frontend for production
      working-directory: ./frontend
      run: |
        npm ci
        npm run build
        npm run build:analyze

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist
        retention-days: 30

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 60
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: sportbeacon_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-asyncio pytest-cov httpx

    - name: Run integration tests
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/sportbeacon_test
        REDIS_URL: redis://localhost:6379
        TESTING: true
      run: |
        pytest tests/test_integration.py -v --cov=services --cov-report=xml

    - name: Run API tests
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/sportbeacon_test
        REDIS_URL: redis://localhost:6379
        TESTING: true
      run: |
        pytest tests/test_api.py -v

    - name: Run player activity simulation
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/sportbeacon_test
        REDIS_URL: redis://localhost:6379
        TESTING: true
      run: |
        python scripts/simulate_player_activity.py --players 10 --duration 5

  # E2E Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Install Playwright
      working-directory: ./frontend
      run: npx playwright install --with-deps

    - name: Run E2E tests
      working-directory: ./frontend
      run: npm run test:e2e

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: frontend/playwright-report/
        retention-days: 30

  # Security & Compliance
  security-compliance:
    name: Security & Compliance
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run OWASP ZAP scan
      uses: zaproxy/action-full-scan@v0.8.0
      with:
        target: 'https://staging.sportbeacon.ai'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

    - name: Run dependency vulnerability scan
      uses: actions/dependency-review-action@v3
      with:
        fail-on-severity: high

    - name: Run container security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Staging Deployment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests, e2e-tests, security-compliance]
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    environment: staging
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
        aws-region: us-east-1

    - name: Deploy to staging
      run: |
        # Deploy using Docker Compose or Kubernetes
        docker-compose -f docker-compose.staging.yml up -d
        
        # Wait for health checks
        ./scripts/wait-for-health.sh https://staging.sportbeacon.ai

    - name: Run smoke tests
      run: |
        ./scripts/smoke-tests.sh https://staging.sportbeacon.ai

    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        text: 'Staging deployment successful!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Production Deployment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-tests, e2e-tests, security-compliance]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    timeout-minutes: 45
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: us-east-1

    - name: Create release tag
      if: github.ref == 'refs/heads/main'
      id: create_tag
      run: |
        VERSION=$(date +'%Y.%m.%d-%H%M')
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        git tag -a "v$VERSION" -m "Production release $VERSION"
        git push origin "v$VERSION"

    - name: Deploy to production
      run: |
        # Deploy using Kubernetes or ECS
        kubectl apply -f k8s/production/
        
        # Wait for deployment to complete
        kubectl rollout status deployment/sportbeacon-ai -n production
        
        # Wait for health checks
        ./scripts/wait-for-health.sh https://sportbeacon.ai

    - name: Run production smoke tests
      run: |
        ./scripts/smoke-tests.sh https://sportbeacon.ai

    - name: Update DNS and CDN
      run: |
        # Update CloudFront distribution
        aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
        
        # Update Route53 if needed
        # aws route53 change-resource-record-sets --hosted-zone-id ${{ secrets.HOSTED_ZONE_ID }} --change-batch file://dns-changes.json

    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        text: 'Production deployment successful! 🚀'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Create GitHub release
      if: github.ref == 'refs/heads/main'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.create_tag.outputs.version }}
        release_name: Release v${{ steps.create_tag.outputs.version }}
        body: |
          ## What's New
          - Enhanced AI coaching capabilities
          - Improved federation integration
          - New plugin marketplace features
          - Performance optimizations
          
          ## Technical Details
          - Build: ${{ github.sha }}
          - Deployed: ${{ github.event.head_commit.timestamp }}
          
          ## Rollback
          If issues are detected, rollback using:
          ```bash
          ./scripts/rollback.sh v${{ steps.create_tag.outputs.version }}
          ```
        draft: false
        prerelease: false

  # Post-Deployment Monitoring
  post-deployment:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run performance tests
      run: |
        # Run Lighthouse CI
        npm install -g @lhci/cli
        lhci autorun

    - name: Check error rates
      run: |
        # Check Sentry for new errors
        curl -H "Authorization: Bearer ${{ secrets.SENTRY_TOKEN }}" \
          "https://sentry.io/api/0/projects/sportbeacon/sportbeacon-ai/events/" \
          | jq '.results | length'

    - name: Monitor system health
      run: |
        # Check Prometheus metrics
        ./scripts/check-metrics.sh

    - name: Send monitoring report
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#monitoring'
        text: 'Post-deployment monitoring completed'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Rollback (Manual)
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'rollback'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: us-east-1

    - name: Rollback deployment
      run: |
        ./scripts/rollback.sh ${{ github.event.inputs.version }}

    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: warning
        channel: '#deployments'
        text: 'Production rollback completed'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 